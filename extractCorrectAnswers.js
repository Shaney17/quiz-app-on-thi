const fs = require('fs');
const path = require('path');

function extractAnswersFromHTML() {
  try {
    console.log('üîç Tr√≠ch xu·∫•t ƒë√°p √°n ch√≠nh x√°c t·ª´ file Word HTML...');
    
    // ƒê·ªçc file HTML
    const htmlPath = path.join(__dirname, 'word_content_with_formatting.html');
    const htmlContent = fs.readFileSync(htmlPath, 'utf8');
    
    // ƒê·ªçc d·ªØ li·ªáu c√¢u h·ªèi hi·ªán t·∫°i
    const questionsPath = path.join(__dirname, 'questions_accurate_from_word.json');
    const questions = JSON.parse(fs.readFileSync(questionsPath, 'utf8'));
    console.log(`üìä ƒê·ªçc ƒë∆∞·ª£c ${questions.length} c√¢u h·ªèi`);
    
    // T√°ch HTML th√†nh c√°c ƒëo·∫°n theo c√¢u h·ªèi
    const questionBlocks = htmlContent.split(/<p><strong>C√¢u \d+[:\s]/);
    console.log(`üìÑ T√¨m th·∫•y ${questionBlocks.length - 1} block c√¢u h·ªèi trong HTML`);
    
    let updatedQuestions = [];
    let correctAnswerCount = 0;
    
    // X·ª≠ l√Ω t·ª´ng c√¢u h·ªèi
    for (let i = 0; i < questions.length; i++) {
      const question = { ...questions[i] };
      const questionNum = i + 1;
      
      // T√¨m block HTML t∆∞∆°ng ·ª©ng
      let matchingBlock = null;
      for (let j = 1; j < questionBlocks.length; j++) {
        if (questionBlocks[j].includes(`</strong>`) && 
            (questionBlocks[j].includes('a.') || questionBlocks[j].includes('b.') || 
             questionBlocks[j].includes('c.') || questionBlocks[j].includes('d.'))) {
          
          // Ki·ªÉm tra xem block n√†y c√≥ ph·∫£i l√† c√¢u hi·ªán t·∫°i kh√¥ng
          const blockIndex = j;
          if (blockIndex === i + 1 || (blockIndex <= i + 5 && blockIndex >= i - 3)) {
            matchingBlock = questionBlocks[j];
            break;
          }
        }
      }
      
      if (matchingBlock) {
        // T√¨m ƒë√°p √°n ƒë∆∞·ª£c b√¥i ƒë·∫≠m (trong th·∫ª <strong>)
        const strongMatches = matchingBlock.match(/<strong>([a-d]\..*?)<\/strong>/g);
        
        if (strongMatches && strongMatches.length > 0) {
          // T√¨m ƒë√°p √°n trong c√°c th·∫ª strong
          let correctAnswer = null;
          
          for (const strongMatch of strongMatches) {
            const content = strongMatch.replace(/<\/?strong>/g, '');
            
            // Ki·ªÉm tra xem c√≥ ph·∫£i ƒë√°p √°n kh√¥ng (b·∫Øt ƒë·∫ßu b·∫±ng a., b., c., d.)
            if (content.match(/^[a-d]\./)) {
              correctAnswer = content;
              break;
            }
          }
          
          if (correctAnswer) {
            // L√†m s·∫°ch ƒë√°p √°n (lo·∫°i b·ªè th·∫ª HTML b√™n trong)
            correctAnswer = correctAnswer.replace(/<[^>]*>/g, '');
            question.answer = correctAnswer;
            correctAnswerCount++;
            
            if (questionNum <= 10 || questionNum === 160) {
              console.log(`‚úÖ C√¢u ${questionNum}: ${correctAnswer.substring(0, 50)}...`);
            }
          } else {
            // N·∫øu kh√¥ng t√¨m th·∫•y ƒë√°p √°n b√¥i ƒë·∫≠m, gi·ªØ nguy√™n ƒë√°p √°n c≈©
            console.log(`‚ö†Ô∏è  C√¢u ${questionNum}: Kh√¥ng t√¨m th·∫•y ƒë√°p √°n b√¥i ƒë·∫≠m`);
          }
        } else {
          console.log(`‚ö†Ô∏è  C√¢u ${questionNum}: Kh√¥ng t√¨m th·∫•y th·∫ª strong cho ƒë√°p √°n`);
        }
      } else {
        console.log(`‚ö†Ô∏è  C√¢u ${questionNum}: Kh√¥ng t√¨m th·∫•y block HTML t∆∞∆°ng ·ª©ng`);
      }
      
      updatedQuestions.push(question);
    }
    
    console.log(`\nüìä K·∫øt qu·∫£: ƒê√£ tr√≠ch xu·∫•t ${correctAnswerCount}/${questions.length} ƒë√°p √°n t·ª´ text b√¥i ƒë·∫≠m`);
    
    // Ki·ªÉm tra ph√¢n b·ªï ƒë√°p √°n
    const answerStats = updatedQuestions.reduce((acc, q) => {
      const ans = q.answer.charAt(0);
      acc[ans] = (acc[ans] || 0) + 1;
      return acc;
    }, {});
    
    console.log('üìà Ph√¢n b·ªï ƒë√°p √°n:', answerStats);
    
    // L∆∞u k·∫øt qu·∫£
    const outputPath = path.join(__dirname, 'questions_with_correct_answers.json');
    fs.writeFileSync(outputPath, JSON.stringify(updatedQuestions, null, 2));
    console.log(`üíæ ƒê√£ l∆∞u v√†o: ${outputPath}`);
    
    // C·∫≠p nh·∫≠t v√†o quiz app
    const quizAppPath = path.join(__dirname, 'quiz-app', 'src', 'data', 'questions.json');
    fs.writeFileSync(quizAppPath, JSON.stringify(updatedQuestions, null, 2));
    console.log(`üéØ ƒê√£ c·∫≠p nh·∫≠t v√†o quiz app`);
    
    return updatedQuestions;
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    return null;
  }
}

// Ch·∫°y script
if (require.main === module) {
  extractAnswersFromHTML();
}

module.exports = { extractAnswersFromHTML };
