const fs = require('fs');
const path = require('path');

function fixQuestionFormat() {
  try {
    // ƒê·ªçc file JSON hi·ªán t·∫°i
    const filePath = path.join(__dirname, '../../../questions_ck_ttck.json');
    const questionsData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    
    console.log(`ƒêang x·ª≠ l√Ω ${questionsData.length} c√¢u h·ªèi...`);
    let fixedCount = 0;
    
    const fixedQuestions = questionsData.map((q, index) => {
      let question = { ...q };
      let wasFixed = false;
      
      // Fix c√¢u 33: G·ªôp option a b·ªã t√°ch
      if (question.question.includes('C√¢u 33:')) {
        const newOptions = [];
        let i = 0;
        while (i < question.options.length) {
          if (question.options[i].startsWith('a.') && 
              i + 1 < question.options.length && 
              !question.options[i + 1].match(/^[b-d]\./)) {
            // G·ªôp option a b·ªã t√°ch
            newOptions.push(question.options[i] + ' ' + question.options[i + 1]);
            i += 2;
            wasFixed = true;
          } else if (question.options[i].startsWith('b.') && 
                     i + 1 < question.options.length && 
                     !question.options[i + 1].match(/^[c-d]\./)) {
            // G·ªôp option b b·ªã t√°ch
            newOptions.push(question.options[i] + ' ' + question.options[i + 1]);
            i += 2;
            wasFixed = true;
          } else if (question.options[i].startsWith('c.') && 
                     i + 1 < question.options.length && 
                     !question.options[i + 1].match(/^d\./)) {
            // G·ªôp option c b·ªã t√°ch
            newOptions.push(question.options[i] + ' ' + question.options[i + 1]);
            i += 2;
            wasFixed = true;
          } else {
            newOptions.push(question.options[i]);
            i++;
          }
        }
        question.options = newOptions;
        
        // Fix answer cho c√¢u 33
        if (question.answer === 'th·ªùi ƒëi·ªÉm xin ph√©p ni√™m y·∫øt t·ª´ 10 t·ª∑ VND tr·ªü l√™n.') {
          question.answer = 'a. L√† c√¥ng ty c·ªï ph·∫ßn, c√¥ng ty tr√°ch nhi·ªám h·ªØu h·∫°n, doanh nghi·ªáp nh√† n∆∞·ªõc c√≥ v·ªën ƒëi·ªÅu l·ªá ƒë‚Ä¢ g√≥p t·∫°i th·ªùi ƒëi·ªÉm xin ph√©p ni√™m y·∫øt t·ª´ 10 t·ª∑ VND tr·ªü l√™n.';
          wasFixed = true;
        }
      }
      
      // Fix c√°c c√¢u c√≥ format I, II, III (nh∆∞ c√¢u 111, 112...)
      if (question.options.some(opt => opt.match(/^(I|II|III|IV)\.?\s/))) {
        const romanNumerals = [];
        const actualOptions = [];
        
        question.options.forEach(opt => {
          if (opt.match(/^(I|II|III|IV)\.?\s/)) {
            romanNumerals.push(opt);
          } else {
            actualOptions.push(opt);
          }
        });
        
        if (romanNumerals.length > 0) {
          // Th√™m c√°c m·ª•c I, II, III v√†o c√¢u h·ªèi
          const romanText = romanNumerals.join(', ');
          question.question = question.question + ':\n' + romanText;
          question.options = actualOptions;
          wasFixed = true;
        }
      }
      
      // Fix c√°c option b·ªã t√°ch do k√Ω t·ª± ƒë·∫∑c bi·ªát
      const fixedOptions = [];
      let i = 0;
      while (i < question.options.length) {
        const currentOpt = question.options[i];
        
        // Ki·ªÉm tra n·∫øu option hi·ªán t·∫°i kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng a., b., c., d. v√† option tr∆∞·ªõc ƒë√≥ c√≥ th·ªÉ ƒë∆∞·ª£c g·ªôp
        if (!currentOpt.match(/^[a-d]\./) && i > 0) {
          const prevIndex = fixedOptions.length - 1;
          if (prevIndex >= 0 && fixedOptions[prevIndex].match(/^[a-d]\./)) {
            // G·ªôp v·ªõi option tr∆∞·ªõc ƒë√≥
            fixedOptions[prevIndex] += ' ' + currentOpt;
            wasFixed = true;
          } else {
            fixedOptions.push(currentOpt);
          }
        } else {
          fixedOptions.push(currentOpt);
        }
        i++;
      }
      
      if (fixedOptions.length !== question.options.length || 
          !fixedOptions.every((opt, idx) => opt === question.options[idx])) {
        question.options = fixedOptions;
        wasFixed = true;
      }
      
      if (wasFixed) {
        fixedCount++;
        console.log(`Fixed c√¢u ${index + 1}: ${question.question.substring(0, 50)}...`);
      }
      
      return question;
    });
    
    // Ghi file ƒë√£ s·ª≠a
    const outputPath = path.join(__dirname, '../../../questions_ck_ttck_fixed.json');
    fs.writeFileSync(outputPath, JSON.stringify(fixedQuestions, null, 2));
    
    console.log(`\n‚úÖ Ho√†n th√†nh! ƒê√£ s·ª≠a ${fixedCount} c√¢u h·ªèi`);
    console.log(`üìÅ File ƒë√£ s·ª≠a: ${outputPath}`);
    console.log(`üìä T·ªïng s·ªë c√¢u h·ªèi: ${fixedQuestions.length}`);
    
    // Copy v√†o quiz app
    const quizAppPath = path.join(__dirname, 'questions.json');
    fs.writeFileSync(quizAppPath, JSON.stringify(fixedQuestions, null, 2));
    console.log(`üìÅ ƒê√£ c·∫≠p nh·∫≠t v√†o quiz app: ${quizAppPath}`);
    
    return fixedQuestions;
    
  } catch (error) {
    console.error('‚ùå L·ªói khi x·ª≠ l√Ω:', error.message);
    return null;
  }
}

// Ch·∫°y script
if (require.main === module) {
  fixQuestionFormat();
}

module.exports = { fixQuestionFormat };
