const fs = require('fs');
const path = require('path');

function comprehensiveFixQuestions() {
  try {
    // ƒê·ªçc file JSON g·ªëc
    const filePath = path.join(__dirname, '../../../questions_ck_ttck.json');
    const questionsData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    console.log(`üîÑ ƒêang x·ª≠ l√Ω ${questionsData.length} c√¢u h·ªèi...`);
    let fixedCount = 0;

    const fixedQuestions = questionsData.map((q, index) => {
      let question = { ...q };
      let wasFixed = false;

      // 1. Fix c√°c c√¢u c√≥ ph·∫ßn "V·∫≠y..." trong options (nh∆∞ c√¢u 2)
      if (question.options.some(opt => opt.startsWith('V·∫≠y') || opt.includes('Nh∆∞ v·∫≠y'))) {
        const questionParts = [];
        const actualOptions = [];

        question.options.forEach(opt => {
          if (opt.startsWith('V·∫≠y') || opt.includes('Nh∆∞ v·∫≠y') || opt.includes('h√†ng nƒÉm nh√† ƒë·∫ßu t∆∞')) {
            questionParts.push(opt);
          } else if (opt.match(/^[a-d]\./)) {
            actualOptions.push(opt);
          } else {
            // C√≥ th·ªÉ l√† ph·∫ßn ti·∫øp theo c·ªßa c√¢u h·ªèi
            questionParts.push(opt);
          }
        });

        if (questionParts.length > 0) {
          question.question = question.question + ' ' + questionParts.join(' ');
          question.options = actualOptions;
          wasFixed = true;
        }
      }

      // 2. Fix c√°c c√¢u c√≥ Roman numerals (I, II, III, IV)
      if (question.options.some(opt => opt.match(/^(I|II|III|IV)\.?\s/))) {
        const romanNumerals = [];
        const actualOptions = [];

        question.options.forEach(opt => {
          if (opt.match(/^(I|II|III|IV)\.?\s/)) {
            romanNumerals.push(opt);
          } else if (opt.match(/^[a-d]\./)) {
            actualOptions.push(opt);
          }
        });

        if (romanNumerals.length > 0) {
          question.question = question.question + ':\n' + romanNumerals.join('\n');
          question.options = actualOptions;
          wasFixed = true;
        }
      }

      // 3. Fix options b·ªã t√°ch d√≤ng (kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng a., b., c., d.)
      const fixedOptions = [];
      let i = 0;

      while (i < question.options.length) {
        const currentOpt = question.options[i];

        // N·∫øu option hi·ªán t·∫°i b·∫Øt ƒë·∫ßu b·∫±ng a., b., c., d. th√¨ th√™m v√†o
        if (currentOpt.match(/^[a-d]\./)) {
          fixedOptions.push(currentOpt);
        } else {
          // N·∫øu kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng a., b., c., d. th√¨ g·ªôp v·ªõi option tr∆∞·ªõc
          if (fixedOptions.length > 0) {
            const lastIndex = fixedOptions.length - 1;
            fixedOptions[lastIndex] += ' ' + currentOpt;
            wasFixed = true;
          } else {
            // N·∫øu kh√¥ng c√≥ option tr∆∞·ªõc ƒë√≥, c√≥ th·ªÉ l√† ph·∫ßn c·ªßa c√¢u h·ªèi
            if (!currentOpt.match(/^[a-d]\./)) {
              question.question += ' ' + currentOpt;
              wasFixed = true;
            } else {
              fixedOptions.push(currentOpt);
            }
          }
        }
        i++;
      }

      if (fixedOptions.length > 0 && fixedOptions.length !== question.options.length) {
        question.options = fixedOptions;
        wasFixed = true;
      }

      // 4. ƒê·∫£m b·∫£o c√≥ ƒë·ªß 4 options (a, b, c, d)
      if (question.options.length < 4) {
        console.log(`‚ö†Ô∏è  C√¢u ${index + 1} ch·ªâ c√≥ ${question.options.length} options`);
      }

      // 5. Fix answer n·∫øu c·∫ßn thi·∫øt
      if (question.answer && !question.options.some(opt => opt === question.answer)) {
        // T√¨m option g·∫ßn gi·ªëng nh·∫•t v·ªõi answer
        const possibleAnswers = question.options.filter(opt =>
          opt.toLowerCase().includes(question.answer.toLowerCase()) ||
          question.answer.toLowerCase().includes(opt.toLowerCase())
        );

        if (possibleAnswers.length === 1) {
          question.answer = possibleAnswers[0];
          wasFixed = true;
        }
      }

      // 6. L√†m s·∫°ch text (lo·∫°i b·ªè k√Ω t·ª± l·∫°, kho·∫£ng tr·∫Øng th·ª´a)
      question.question = question.question.replace(/\s+/g, ' ').trim();
      question.options = question.options.map(opt => opt.replace(/\s+/g, ' ').trim());
      if (question.answer) {
        question.answer = question.answer.replace(/\s+/g, ' ').trim();
      }

      if (wasFixed) {
        fixedCount++;
        console.log(`‚úÖ Fixed c√¢u ${index + 1}: ${question.question.substring(0, 60)}...`);
      }

      return question;
    });

    // L∆∞u file ƒë√£ s·ª≠a
    const outputPath = path.join(__dirname, '../../../questions_ck_ttck_comprehensive_fixed.json');
    fs.writeFileSync(outputPath, JSON.stringify(fixedQuestions, null, 2), 'utf8');

    // Copy v√†o quiz app
    const quizAppPath = path.join(__dirname, 'questions.json');
    fs.writeFileSync(quizAppPath, JSON.stringify(fixedQuestions, null, 2), 'utf8');

    console.log(`\nüéâ HO√ÄN TH√ÄNH!`);
    console.log(`üìä T·ªïng s·ªë c√¢u h·ªèi x·ª≠ l√Ω: ${fixedQuestions.length}`);
    console.log(`üîß S·ªë c√¢u ƒë√£ s·ª≠a: ${fixedCount}`);
    console.log(`üìÅ File g·ªëc ƒë√£ s·ª≠a: ${outputPath}`);
    console.log(`üìÅ File quiz app: ${quizAppPath}`);

    // Ki·ªÉm tra m·ªôt s·ªë c√¢u m·∫´u
    console.log('\nüìã KI·ªÇM TRA M·∫™U:');
    [1, 2, 33, 50, 100].forEach(num => {
      const q = fixedQuestions[num - 1];
      if (q) {
        console.log(`\nC√¢u ${num}:`);
        console.log(`Q: ${q.question.substring(0, 80)}...`);
        console.log(`Options: ${q.options.length} choices`);
        console.log(`Answer: ${q.answer ? q.answer.substring(0, 50) : 'N/A'}...`);
      }
    });

    return fixedQuestions;

  } catch (error) {
    console.error('‚ùå L·ªói khi x·ª≠ l√Ω:', error.message);
    console.error(error.stack);
    return null;
  }
}

// Ch·∫°y script
if (require.main === module) {
  comprehensiveFixQuestions();
}

module.exports = { comprehensiveFixQuestions };
