const fs = require('fs');

function fixWordDataExtraction() {
  try {
    console.log('üîß S·ª≠a l·∫°i vi·ªác tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ Word...');

    const content = fs.readFileSync('word_content_raw.txt', 'utf8');
    const lines = content.split('\n').map(line => line.trim()).filter(line => line.length > 0);

    const questions = [];
    let currentQuestion = null;
    let collectingQuestion = false;
    let collectingOptions = false;

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];

      // T√¨m c√¢u h·ªèi b·∫Øt ƒë·∫ßu b·∫±ng "C√¢u X:"
      const questionMatch = line.match(/^C√¢u\s+(\d+):\s*(.*)/);
      if (questionMatch) {
        // L∆∞u c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
        if (currentQuestion && currentQuestion.options.length > 0) {
          // ƒê·∫£m b·∫£o c√≥ answer
          if (!currentQuestion.answer && currentQuestion.options.length > 0) {
            currentQuestion.answer = currentQuestion.options[0];
          }
          questions.push(currentQuestion);
        }

        currentQuestion = {
          question: line,
          options: [],
          answer: "",
          questionNumber: parseInt(questionMatch[1])
        };
        collectingQuestion = true;
        collectingOptions = false;
        continue;
      }

      if (currentQuestion) {
        // N·∫øu ƒëang thu th·∫≠p c√¢u h·ªèi v√† g·∫∑p option ƒë·∫ßu ti√™n
        const optionMatch = line.match(/^([a-d][\)\.]\s*.+)/);
        if (optionMatch) {
          collectingQuestion = false;
          collectingOptions = true;
          currentQuestion.options.push(optionMatch[1]);

          // Option ƒë·∫ßu ti√™n l√†m answer m·∫∑c ƒë·ªãnh
          if (!currentQuestion.answer) {
            currentQuestion.answer = optionMatch[1];
          }
        } else if (collectingOptions && line.match(/^([a-d][\)\.]\s*.+)/)) {
          // C√°c options ti·∫øp theo
          currentQuestion.options.push(line);
        } else if (collectingQuestion) {
          // V·∫´n ƒëang thu th·∫≠p c√¢u h·ªèi
          currentQuestion.question += ' ' + line;
        } else if (collectingOptions && currentQuestion.options.length > 0) {
          // C√≥ th·ªÉ l√† ph·∫ßn ti·∫øp theo c·ªßa option cu·ªëi
          const lastIndex = currentQuestion.options.length - 1;
          currentQuestion.options[lastIndex] += ' ' + line;
        }
      }
    }

    // L∆∞u c√¢u h·ªèi cu·ªëi c√πng
    if (currentQuestion && currentQuestion.options.length > 0) {
      if (!currentQuestion.answer && currentQuestion.options.length > 0) {
        currentQuestion.answer = currentQuestion.options[0];
      }
      questions.push(currentQuestion);
    }

    console.log(`‚úÖ Tr√≠ch xu·∫•t ƒë∆∞·ª£c ${questions.length} c√¢u h·ªèi`);

    // Ki·ªÉm tra c√¢u 160
    const question160 = questions.find(q => q.questionNumber === 160);
    if (question160) {
      console.log('\nüìã C√ÇU 160 CH√çNH X√ÅC T·ª™ WORD:');
      console.log('Question:', question160.question);
      console.log('Options:');
      question160.options.forEach(opt => console.log(`  ${opt}`));
      console.log('Answer:', question160.answer);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c√¢u 160');
    }

    // Chu·∫©n h√≥a v√† s·∫Øp x·∫øp l·∫°i
    const sortedQuestions = questions
      .sort((a, b) => a.questionNumber - b.questionNumber)
      .map((q, index) => ({
        question: q.question,
        options: q.options,
        answer: q.answer
      }));

    // L∆∞u file ch√≠nh x√°c
    const outputPath = 'questions_accurate_from_word.json';
    fs.writeFileSync(outputPath, JSON.stringify(sortedQuestions, null, 2), 'utf8');

    // C·∫≠p nh·∫≠t quiz app
    const quizAppPath = './quiz-app/src/data/questions.json';
    fs.writeFileSync(quizAppPath, JSON.stringify(sortedQuestions, null, 2), 'utf8');

    console.log(`\n‚úÖ ƒê√É HO√ÄN TH√ÄNH!`);
    console.log(`üìÅ File ch√≠nh x√°c: ${outputPath}`);
    console.log(`üìÅ ƒê√£ c·∫≠p nh·∫≠t quiz app: ${quizAppPath}`);
    console.log(`üìä T·ªïng s·ªë c√¢u: ${sortedQuestions.length}`);

    // Ki·ªÉm tra l·∫°i c√¢u 160 sau khi c·∫≠p nh·∫≠t
    if (sortedQuestions[159]) {
      console.log('\nüéØ C√ÇU 160 SAU KHI C·∫¨P NH·∫¨T:');
      console.log('Q:', sortedQuestions[159].question);
      console.log('Options:', sortedQuestions[159].options.length);
      sortedQuestions[159].options.forEach(opt => console.log(`  ${opt}`));
      console.log('A:', sortedQuestions[159].answer);
    }

    // Th·ªëng k√™
    console.log('\nüìä TH·ªêNG K√ä:');
    const questionNumbers = questions.map(q => q.questionNumber).sort((a, b) => a - b);
    console.log(`C√¢u ƒë·∫ßu ti√™n: ${questionNumbers[0]}`);
    console.log(`C√¢u cu·ªëi c√πng: ${questionNumbers[questionNumbers.length - 1]}`);

    // T√¨m c√¢u b·ªã thi·∫øu
    const missingNumbers = [];
    for (let i = 1; i <= questionNumbers[questionNumbers.length - 1]; i++) {
      if (!questionNumbers.includes(i)) {
        missingNumbers.push(i);
      }
    }

    if (missingNumbers.length > 0) {
      console.log(`‚ö†Ô∏è  C√¢u b·ªã thi·∫øu: ${missingNumbers.join(', ')}`);
    } else {
      console.log('‚úÖ Kh√¥ng c√≥ c√¢u n√†o b·ªã thi·∫øu');
    }

    return sortedQuestions;

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    return null;
  }
}

// Ch·∫°y script
fixWordDataExtraction();
