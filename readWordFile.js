const mammoth = require('mammoth');
const fs = require('fs');

async function readWordFile() {
  try {
    console.log('üìñ ƒêang ƒë·ªçc file Word g·ªëc...');

    const result = await mammoth.extractRawText({
      path: '500 c√¢u h·ªèi _ Nh·ªØng v·∫•n ƒë·ªÅ c∆° b·∫£n v·ªÅ CK v√† TTCK _ Ch·ªânh _06.10.2022.docx'
    });

    const text = result.value;
    console.log(`‚úÖ ƒê·ªçc th√†nh c√¥ng! N·ªôi dung c√≥ ${text.length} k√Ω t·ª±`);

    // L∆∞u text th√¥ ƒë·ªÉ ph√¢n t√≠ch
    fs.writeFileSync('word_content_raw.txt', text, 'utf8');
    console.log('üíæ ƒê√£ l∆∞u n·ªôi dung th√¥ v√†o word_content_raw.txt');

    // T√¨m v√† tr√≠ch xu·∫•t c√¢u h·ªèi
    const questions = extractQuestionsFromText(text);

    if (questions.length > 0) {
      // L∆∞u th√†nh JSON
      fs.writeFileSync('questions_from_word.json', JSON.stringify(questions, null, 2), 'utf8');
      console.log(`‚úÖ ƒê√£ tr√≠ch xu·∫•t ${questions.length} c√¢u h·ªèi t·ª´ file Word`);
      console.log('üíæ ƒê√£ l∆∞u v√†o questions_from_word.json');

      // Ki·ªÉm tra c√¢u 160
      if (questions[159]) {
        console.log('\nüìã KI·ªÇM TRA C√ÇU 160 T·ª™ FILE WORD:');
        console.log('Question:', questions[159].question.substring(0, 100) + '...');
        console.log('Options:', questions[159].options.length, 'choices');
        questions[159].options.forEach((opt, idx) => {
          console.log(`  ${opt.substring(0, 80)}${opt.length > 80 ? '...' : ''}`);
        });
        console.log('Answer:', questions[159].answer.substring(0, 50) + '...');
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c√¢u 160 trong file Word');
      }

      // So s√°nh v·ªõi file hi·ªán t·∫°i
      console.log('\nüîç SO S√ÅNH V·ªöI FILE HI·ªÜN T·∫†I:');
      try {
        const currentQuestions = JSON.parse(fs.readFileSync('./quiz-app/src/data/questions.json', 'utf8'));
        console.log(`File hi·ªán t·∫°i c√≥ ${currentQuestions.length} c√¢u`);
        console.log(`File Word c√≥ ${questions.length} c√¢u`);

        if (currentQuestions[159] && questions[159]) {
          const currentQ160 = currentQuestions[159].question;
          const wordQ160 = questions[159].question;

          if (currentQ160 !== wordQ160) {
            console.log('‚ùå C√ÇU 160 KH√ÅC NHAU!');
            console.log('Hi·ªán t·∫°i:', currentQ160.substring(0, 80) + '...');
            console.log('T·ª´ Word: ', wordQ160.substring(0, 80) + '...');
          } else {
            console.log('‚úÖ C√¢u 160 kh·ªõp nhau');
          }
        }

      } catch (error) {
        console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ so s√°nh v·ªõi file hi·ªán t·∫°i:', error.message);
      }

    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o trong file Word');
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªçc file Word:', error.message);
  }
}

function extractQuestionsFromText(text) {
  const questions = [];
  const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);

  let currentQuestion = null;
  let collectingOptions = false;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // T√¨m c√¢u h·ªèi (C√¢u 1:, C√¢u 2:, ...)
    const questionMatch = line.match(/^C√¢u\s+(\d+):\s*(.*)/);
    if (questionMatch) {
      // L∆∞u c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
      if (currentQuestion) {
        questions.push(currentQuestion);
      }

      currentQuestion = {
        question: line,
        options: [],
        answer: ""
      };
      collectingOptions = true;
      continue;
    }

    // Thu th·∫≠p options (a., b., c., d. ho·∫∑c a), b), c), d))
    if (collectingOptions && currentQuestion) {
      const optionMatch = line.match(/^([a-d][\)\.]\s*.+)/);
      if (optionMatch) {
        currentQuestion.options.push(optionMatch[1]);

        // Gi·∫£ s·ª≠ option ƒë·∫ßu ti√™n l√† ƒë√°p √°n (c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh)
        if (!currentQuestion.answer) {
          currentQuestion.answer = optionMatch[1];
        }
      } else if (line.match(/^[IVX]+\.?\s/)) {
        // Roman numerals - th√™m v√†o c√¢u h·ªèi
        currentQuestion.question += '\n' + line;
      } else if (currentQuestion.options.length > 0 && !line.match(/^C√¢u\s+\d+:/)) {
        // C√≥ th·ªÉ l√† ph·∫ßn ti·∫øp theo c·ªßa option cu·ªëi c√πng
        const lastIndex = currentQuestion.options.length - 1;
        currentQuestion.options[lastIndex] += ' ' + line;
      }
    }
  }

  // L∆∞u c√¢u h·ªèi cu·ªëi c√πng
  if (currentQuestion) {
    questions.push(currentQuestion);
  }

  return questions;
}

// Ch·∫°y script
readWordFile();
