const fs = require('fs');

function cleanExtractedQuestions() {
  try {
    const questions = JSON.parse(fs.readFileSync('questions_complete_extracted.json', 'utf8'));
    
    console.log(`üßπ ƒêang l√†m s·∫°ch ${questions.length} c√¢u h·ªèi...`);
    
    const cleanedQuestions = questions.map((q, index) => {
      const questionNum = index + 1;
      
      // L√†m s·∫°ch c√¢u h·ªèi
      let question = q.question
        .replace(/"/g, '') // Lo·∫°i b·ªè quotes
        .replace(/\s+/g, ' ') // G·ªôp kho·∫£ng tr·∫Øng
        .replace(/[""]/g, '"') // Chu·∫©n h√≥a quotes
        .trim();
      
      // ƒê·∫£m b·∫£o c√¢u h·ªèi b·∫Øt ƒë·∫ßu ƒë√∫ng
      if (!question.startsWith(`C√¢u ${questionNum}:`)) {
        const match = question.match(/C√¢u \d+:(.*)/);
        if (match) {
          question = `C√¢u ${questionNum}:${match[1]}`;
        }
      }
      
      // L√†m s·∫°ch options
      let options = q.options.map(opt => {
        return opt
          .replace(/"/g, '') // Lo·∫°i b·ªè quotes
          .replace(/\s+/g, ' ') // G·ªôp kho·∫£ng tr·∫Øng
          .replace(/[""]/g, '"') // Chu·∫©n h√≥a quotes
          .replace(/,$/, '') // Lo·∫°i b·ªè d·∫•u phay cu·ªëi
          .trim();
      });
      
      // Lo·∫°i b·ªè options tr·ªëng ho·∫∑c tr√πng l·∫∑p
      options = [...new Set(options.filter(opt => opt.length > 0))];
      
      // ƒê·∫£m b·∫£o options c√≥ ƒë·ªãnh d·∫°ng ƒë√∫ng (b·∫Øt ƒë·∫ßu b·∫±ng a., b., c., d.)
      const correctOptions = [];
      const letters = ['a', 'b', 'c', 'd'];
      
      options.forEach((opt, idx) => {
        if (idx < 4) {
          let cleanOpt = opt;
          // N·∫øu kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng letter, th√™m v√†o
          if (!cleanOpt.match(/^[a-d][\.)]/)) {
            cleanOpt = `${letters[idx]}. ${cleanOpt}`;
          }
          correctOptions.push(cleanOpt);
        }
      });
      
      // ƒê·∫£m b·∫£o c√≥ ƒë·ªß 4 options
      while (correctOptions.length < 4) {
        correctOptions.push(`${letters[correctOptions.length]}. [Option kh√¥ng x√°c ƒë·ªãnh]`);
      }
      
      // L√†m s·∫°ch answer
      let answer = q.answer
        .replace(/"/g, '') // Lo·∫°i b·ªè quotes
        .replace(/\s+/g, ' ') // G·ªôp kho·∫£ng tr·∫Øng
        .replace(/[""]/g, '"') // Chu·∫©n h√≥a quotes
        .replace(/,$/, '') // Lo·∫°i b·ªè d·∫•u phay cu·ªëi
        .trim();
      
      // T√¨m answer ph√π h·ª£p trong options
      let matchingOption = correctOptions.find(opt => opt === answer);
      
      if (!matchingOption) {
        // Th·ª≠ t√¨m b·∫±ng c√°ch so s√°nh n·ªôi dung
        matchingOption = correctOptions.find(opt => {
          const optContent = opt.replace(/^[a-d][\.)]\s*/, '').toLowerCase();
          const answerContent = answer.replace(/^[a-d][\.)]\s*/, '').toLowerCase();
          return optContent.includes(answerContent) || answerContent.includes(optContent);
        });
      }
      
      if (!matchingOption) {
        // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, d√πng option ƒë·∫ßu ti√™n
        matchingOption = correctOptions[0];
      }
      
      return {
        question,
        options: correctOptions,
        answer: matchingOption
      };
    });
    
    // L∆∞u file ƒë√£ l√†m s·∫°ch
    const outputPath = 'questions_final_cleaned.json';
    fs.writeFileSync(outputPath, JSON.stringify(cleanedQuestions, null, 2), 'utf8');
    
    // Copy v√†o quiz app
    const quizAppPath = './quiz-app/src/data/questions.json';
    fs.writeFileSync(quizAppPath, JSON.stringify(cleanedQuestions, null, 2), 'utf8');
    
    console.log(`\n‚ú® HO√ÄN TH√ÄNH!`);
    console.log(`üìä T·ªïng s·ªë c√¢u h·ªèi ƒë√£ l√†m s·∫°ch: ${cleanedQuestions.length}`);
    console.log(`üìÅ File cu·ªëi c√πng: ${outputPath}`);
    console.log(`üìÅ File quiz app: ${quizAppPath}`);
    
    // Ki·ªÉm tra ch·∫•t l∆∞·ª£ng
    let goodQuestions = 0;
    let problemQuestions = 0;
    
    cleanedQuestions.forEach((q, index) => {
      const hasGoodOptions = q.options.every(opt => opt.length > 5 && !opt.includes('[Option kh√¥ng x√°c ƒë·ªãnh]'));
      const hasGoodAnswer = q.answer && q.answer.length > 5 && !q.answer.includes('[Option kh√¥ng x√°c ƒë·ªãnh]');
      
      if (hasGoodOptions && hasGoodAnswer) {
        goodQuestions++;
      } else {
        problemQuestions++;
        if (problemQuestions <= 5) {
          console.log(`‚ö†Ô∏è  C√¢u ${index + 1} c√≥ v·∫•n ƒë·ªÅ: ${q.question.substring(0, 50)}...`);
        }
      }
    });
    
    console.log(`\nüìà TH·ªêNG K√ä CH·∫§T L∆Ø·ª¢NG:`);
    console.log(`‚úÖ C√¢u h·ªèi t·ªët: ${goodQuestions}`);
    console.log(`‚ö†Ô∏è  C√¢u h·ªèi c√≥ v·∫•n ƒë·ªÅ: ${problemQuestions}`);
    console.log(`üìä T·ª∑ l·ªá t·ªët: ${((goodQuestions / cleanedQuestions.length) * 100).toFixed(1)}%`);
    
    // Hi·ªÉn th·ªã m·∫´u
    console.log('\nüìã M·∫™U SAU KHI L√ÄM S·∫†CH:');
    [1, 2, 33, 100, 200, 300, 400, 500].forEach(num => {
      const q = cleanedQuestions[num - 1];
      if (q) {
        console.log(`\n--- C√¢u ${num} ---`);
        console.log(`Q: ${q.question.substring(0, 80)}...`);
        q.options.forEach((opt, idx) => {
          console.log(`   ${opt.substring(0, 60)}${opt.length > 60 ? '...' : ''}`);
        });
        console.log(`A: ${q.answer.substring(0, 60)}...`);
      }
    });
    
    return cleanedQuestions;
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    return null;
  }
}

// Ch·∫°y script
if (require.main === module) {
  cleanExtractedQuestions();
}

module.exports = { cleanExtractedQuestions };
