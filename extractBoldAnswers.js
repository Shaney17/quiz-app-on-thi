const mammoth = require('mammoth');
const fs = require('fs');

async function extractWithBoldAnswers() {
  try {
    console.log('üìñ ƒêang ƒë·ªçc file Word v·ªõi th√¥ng tin formatting...');

    // ƒê·ªçc file v·ªõi formatting ƒë·ªÉ nh·∫≠n di·ªán bold
    const result = await mammoth.convertToHtml({
      path: '500 c√¢u h·ªèi _ Nh·ªØng v·∫•n ƒë·ªÅ c∆° b·∫£n v·ªÅ CK v√† TTCK _ Ch·ªânh _06.10.2022.docx',
      styleMap: [
        "b => strong", // Map bold to strong tags
        "strong => strong"
      ]
    });

    const html = result.value;

    // L∆∞u HTML ƒë·ªÉ debug
    fs.writeFileSync('word_content_with_formatting.html', html, 'utf8');
    console.log('üíæ ƒê√£ l∆∞u HTML c√≥ formatting v√†o word_content_with_formatting.html');

    // Ph√¢n t√≠ch HTML ƒë·ªÉ t√¨m ƒë√°p √°n bold
    const questions = extractQuestionsFromHtml(html);

    if (questions.length > 0) {
      fs.writeFileSync('questions_with_bold_answers.json', JSON.stringify(questions, null, 2), 'utf8');
      console.log(`‚úÖ ƒê√£ tr√≠ch xu·∫•t ${questions.length} c√¢u h·ªèi v·ªõi ƒë√°p √°n bold`);

      // Ki·ªÉm tra m·ªôt s·ªë c√¢u m·∫´u
      console.log('\nüìã KI·ªÇM TRA M·ªòT S·ªê C√ÇU V·ªöI ƒê√ÅP √ÅN BOLD:');
      [1, 2, 33, 160].forEach(num => {
        const q = questions.find(q => q.questionNumber === num);
        if (q) {
          console.log(`\n--- C√¢u ${num} ---`);
          console.log(`Q: ${q.question.substring(0, 80)}...`);
          q.options.forEach(opt => {
            const marker = opt.isBold ? ' ‚≠ê (BOLD - ƒê√ÅNG √ÅN)' : '';
            console.log(`   ${opt.text}${marker}`);
          });
          console.log(`A: ${q.answer}`);
        }
      });

      // Chuy·ªÉn ƒë·ªïi sang format chu·∫©n cho quiz app
      const standardQuestions = questions.map((q, index) => ({
        question: `C√¢u ${index + 1}: ${q.question.replace(/^C√¢u\s+\d+:\s*/, '').trim()}`,
        options: q.options.map(opt => opt.text),
        answer: q.answer
      }));

      // L∆∞u v√† c·∫≠p nh·∫≠t quiz app
      const outputPath = '../questions_with_correct_bold_answers.json';
      fs.writeFileSync(outputPath, JSON.stringify(standardQuestions, null, 2), 'utf8');

      const quizAppPath = './quiz-app/src/data/questions.json';
      fs.writeFileSync(quizAppPath, JSON.stringify(standardQuestions, null, 2), 'utf8');

      console.log(`\n‚úÖ ƒê√É HO√ÄN TH√ÄNH!`);
      console.log(`üìÅ File c√≥ ƒë√°p √°n bold: ${outputPath}`);
      console.log(`üìÅ ƒê√£ c·∫≠p nh·∫≠t quiz app: ${quizAppPath}`);
      console.log(`üìä T·ªïng s·ªë c√¢u: ${standardQuestions.length}`);

      // Th·ªëng k√™ v·ªÅ ƒë√°p √°n
      let boldAnswersFound = 0;
      let noBoldAnswers = 0;

      questions.forEach(q => {
        const boldOptions = q.options.filter(opt => opt.isBold);
        if (boldOptions.length > 0) {
          boldAnswersFound++;
        } else {
          noBoldAnswers++;
        }
      });

      console.log(`\nüìä TH·ªêNG K√ä ƒê√ÅP √ÅN BOLD:`);
      console.log(`‚úÖ C√¢u c√≥ ƒë√°p √°n bold: ${boldAnswersFound}`);
      console.log(`‚ö†Ô∏è  C√¢u kh√¥ng c√≥ ƒë√°p √°n bold: ${noBoldAnswers}`);
      console.log(`üìà T·ª∑ l·ªá c√≥ ƒë√°p √°n bold: ${((boldAnswersFound / questions.length) * 100).toFixed(1)}%`);

    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o');
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªçc file Word:', error.message);
  }
}

function extractQuestionsFromHtml(html) {
  const questions = [];

  // Chia HTML th√†nh c√°c ƒëo·∫°n d·ª±a tr√™n c√¢u h·ªèi
  const questionRegex = /<p[^>]*>.*?C√¢u\s+(\d+):\s*(.*?)<\/p>/gi;
  const sections = html.split(questionRegex);

  for (let i = 1; i < sections.length; i += 3) {
    const questionNumber = parseInt(sections[i]);
    const questionText = cleanHtmlTags(sections[i + 1]);
    const contentAfter = sections[i + 2] || '';

    // T√¨m options trong n·ªôi dung sau c√¢u h·ªèi
    const options = extractOptionsFromHtml(contentAfter);

    if (options.length > 0) {
      // T√¨m ƒë√°p √°n bold
      const boldOption = options.find(opt => opt.isBold);
      const answer = boldOption ? boldOption.text : options[0]?.text || '';

      // T·∫°o c√¢u h·ªèi ho√†n ch·ªânh t·ª´ c√°c ph·∫ßn
      let fullQuestion = `C√¢u ${questionNumber}: ${questionText}`;

      // T√¨m th√™m text c·ªßa c√¢u h·ªèi trong contentAfter (tr∆∞·ªõc options ƒë·∫ßu ti√™n)
      const beforeFirstOption = contentAfter.split(/<p[^>]*>.*?[a-d][\)\.]/i)[0];
      if (beforeFirstOption) {
        const additionalText = cleanHtmlTags(beforeFirstOption).trim();
        if (additionalText && !additionalText.match(/^[a-d][\)\.]/)) {
          fullQuestion += ' ' + additionalText;
        }
      }

      questions.push({
        questionNumber,
        question: fullQuestion,
        options,
        answer
      });
    }
  }

  return questions.sort((a, b) => a.questionNumber - b.questionNumber);
}

function extractOptionsFromHtml(html) {
  const options = [];

  // T√¨m t·∫•t c·∫£ options (a., b., c., d. ho·∫∑c a), b), c), d))
  const optionRegex = /<p[^>]*>(.*?[a-d][\)\.]\s*(.*?))<\/p>/gi;
  let match;

  while ((match = optionRegex.exec(html)) !== null) {
    const fullMatch = match[1];
    const optionContent = match[2] || '';

    // Ki·ªÉm tra c√≥ bold kh√¥ng
    const isBold = fullMatch.includes('<strong>') || fullMatch.includes('<b>');

    // L√†m s·∫°ch text
    const cleanText = cleanHtmlTags(fullMatch).trim();

    // Ch·ªâ l·∫•y n·∫øu b·∫Øt ƒë·∫ßu b·∫±ng a., b., c., d.
    if (cleanText.match(/^[a-d][\)\.]/)) {
      options.push({
        text: cleanText,
        isBold
      });
    }
  }

  return options;
}

function cleanHtmlTags(html) {
  return html
    .replace(/<[^>]*>/g, '') // Lo·∫°i b·ªè HTML tags
    .replace(/&nbsp;/g, ' ') // Chuy·ªÉn &nbsp; th√†nh space
    .replace(/&amp;/g, '&')  // Chuy·ªÉn &amp; th√†nh &
    .replace(/&lt;/g, '<')   // Chuy·ªÉn &lt; th√†nh <
    .replace(/&gt;/g, '>')   // Chuy·ªÉn &gt; th√†nh >
    .replace(/\s+/g, ' ')    // G·ªôp multiple spaces
    .trim();
}

// Ch·∫°y script
extractWithBoldAnswers();
